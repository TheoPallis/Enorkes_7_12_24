import os
import shutil
import re
from Config.Config import log_execution
from collections import defaultdict

def get_path_perimeter(number_anathesis, dedie_path):
    """Generate a list of paths matching the perimeter conditions."""
    lowercase_anathesis = [
        re.sub(r'Ανάθεσης', 'ανάθεσης', item) if item != 'Υποθέσεις Ποινικό' else 'Υποθέσεις απο Ποινικά-Λαμία'
        for item in number_anathesis
    ]
    lowercase_anathesis = [
        re.sub(r' New$', '', item) if item == 'Υποθέσεις 133ης Ανάθεσης New' else item for item in lowercase_anathesis
    ]
    number_anathesis.extend(lowercase_anathesis)
    return [
        os.path.join(dedie_path, path) for path in os.listdir(dedie_path)
        if all(sub in path for sub in ["Υποθέσεις", "σης"]) and any(sub in path for sub in number_anathesis)
    ]

def file_filter(file, first_word_folder):
    """Filter files based on inclusion and exclusion conditions."""
    include_conditions = [
        first_word_folder in file,
        "ΣΧΕΔΙΟ ΑΓΩΓΗΣ ΔΕΔΔΗΕ" in file,
        'ΑΓΩΓΗ ΔΕΔΔΗΕ' in file,
        'ΑΓΩΓΗ_ΔΕΔΔΗΕ' in file
    ]
    exclude_conditions = ["ηρεξούσιο", "Προτάσεις", "Σχετικών", "ΒΕΒΑΙΗ", "οτάσεις", "ενορκη"]
    additional_valid_combinations = ["ΛΑΜΑΚΙΑ", "ΑΥΘΑΙΡΕΤΗ", "ΠΑΡΑΚΑΜΨΗ"]

    if any(include_conditions) and all(term not in file for term in exclude_conditions):
        return True
    if "ΑΓΩΓΗ" in file and any(comb in file for comb in additional_valid_combinations):
        return True
    return False

@log_execution
def get_all_folders(dedie_path, list_ofeileton, out_path, mapping_anatheseis, mapping_kodikoi, number_anathesis):
    """Search for specific folders and files, and map them to the dataframe."""
    mapping_folders = {name: ["-"] for name in list_ofeileton}
    mapping_files = {name: "-" for name in list_ofeileton}
    path_list = get_path_perimeter(number_anathesis, dedie_path)
    for root, _, files in os.walk(path):
        match = re.search(r'\d+ης', root)
        if not match:
            continue
        folder_number = match.group()[:-2]
            for name in list_ofeileton:
                if mapping_anatheseis.get(name) != folder_number:
                    continue
                current_codes = mapping_kodikoi.get(name, [])
                if not current_codes:
                    continue


                    
                if len(current_codes) == 1:
                    for file in files:
                        if current_codes[0] in file:
                            folder_mapping[name] = folder_mapping[name] if folder_mapping[name] != ["-"] else []
                            folder_mapping[name].append(root)
                            found_files[current_codes[0]].append(root)


                        if file.endswith(".docx") and file_filter(file, root):
                            file_path = os.path.join(root, file)
                            file_mapping[name] = file_path
                            shutil.copy(file_path, output_path)



                elif len(current_codes) > 1:
                  for code in current_codes :
                    for root, _, files in os.walk(path):
                        match = re.search(r'\d+ης', root)
                        if not match:
                            continue
                        folder_number = match.group()[:-2]
                            for name in list_ofeileton:
                                if mapping_anatheseis.get(name) != folder_number:
                                    continue
                                current_codes = mapping_kodikoi.get(name, [])
                                if not current_codes:
                                    continue
                                if len(current_codes) == 1:
                                    for file in files:
                                        if current_codes[0] in file:
                                            folder_mapping[name] = folder_mapping[name] if folder_mapping[name] != ["-"] else []
                                            folder_mapping[name].append(root)
                                            found_files[current_codes[0]].append(root)


                                        if file.endswith(".docx") and file_filter(file, root):
                                            file_path = os.path.join(root, file)
                                            file_mapping[name] = file_path
                                            shutil.copy(file_path, output_path)
                

    for path in path_list:
        process_single_path(path)

    return mapping_folders, mapping_files, mapping_kodikoi
